// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using AgentStoryComponents;
namespace AgentStoryTests
{
    /// <summary>
    ///This is a test class for AgentStoryComponents.PropertyString and is intended
    ///to contain all AgentStoryComponents.PropertyString Unit Tests
    ///</summary>
    [TestClass()]
    public class PropertyStringTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion





        /// <summary>
        ///A test for addProp (Property)
        ///</summary>
        [TestMethod()]
        public void addPropTest()
        {
            PropertyString ps = new PropertyString();

            Property prop = null; // TODO: Initialize to an appropriate value

            prop = new Property();
            prop.Name = "Age";
            prop.Val = "21";
            prop.MyType = "int";
            prop.State = 1; //default

            ps.addProp(prop);

            ps.addProp("read-only", "true");

            string v = ps.getPropVal("Age").Val;
            int state = Convert.ToInt32(ps.getPropVal("Age"));

            Property[] p = ps.toPropArray();

            string propStringXML = ps.getSerialized();

            

        }

        [TestMethod()]
        public void deserTest()
        {
            PropertyString ps = new PropertyString();
            string propStringXML64 = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTE2Ij8+DQo8UHJvcGVydGllcyB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIj4NCiAgPHByb3BBcnJheT4NCiAgICA8UHJvcGVydHk+DQogICAgICA8TXlUeXBlPmludDwvTXlUeXBlPg0KICAgICAgPFZhbD4yMTwvVmFsPg0KICAgICAgPE5hbWU+QWdlPC9OYW1lPg0KICAgIDwvUHJvcGVydHk+DQogICAgPFByb3BlcnR5Pg0KICAgICAgPE15VHlwZT5zdHJpbmc8L015VHlwZT4NCiAgICAgIDxWYWw+dHJ1ZTwvVmFsPg0KICAgICAgPE5hbWU+cmVhZC1vbmx5PC9OYW1lPg0KICAgIDwvUHJvcGVydHk+DQogIDwvcHJvcEFycmF5Pg0KPC9Qcm9wZXJ0aWVzPg==";
            Properties propArray = ps.deserializeProperties(propStringXML64);
            Assert.AreEqual(propArray.propArray.Length, 2);

            PropertyString psNew = ps.loadFromPropArray(propArray);

            string age = psNew.getPropVal("Age").Val;

            Assert.AreEqual(age, "21");

        }

    }


}
